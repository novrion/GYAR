#include "beta.h"

using namespace std;



map<int, char> pieces = {

	{0, ' '},

	{1000, 'P'},
	{3000, 'H'},
	{3100, 'B'},
	{5000, 'R'},
	{9000, 'Q'},
	{100000, 'K'},

	{-1000, 'p'},
	{-3000, 'h'},
	{-3100, 'b'},
	{-5000, 'r'},
	{-9000, 'q'},
	{-100000, 'k'}
};


const int board_regular[kNPositions][8][8] = {

	{
		{5000, 1000, 0, 0, 0, -1000, 0, -5000},
		{0, 1000, 0, 0, 0, 0, -1000, -3000},
		{3100, 1000, 3000, 0, 0, 0, 0, -3100},
		{9000, 0, 0, 3000, 0, -1000, 0, -9000},
		{100000, 0, 0, 1000, 0, 0, -1000, -100000},
		{3100, 1000, 0, 0, 0, -3000, -1000, -3100},
		{0, 1000, 0, 0, 0, 0, -1000, 0},
		{5000, 1000, 0, 0, 0, 0, -1000, -5000}
	},
	
	{
		{5000, 1000, 0, 0, 0, 0, -1000, -5000},
		{3000, 1000, 0, 0, 3100, 0, -1000, 0},
		{3100, 1000, 0, 0, 0, -3000, -1000, -3100},
		{9000, 1000, 0, 0, 0, -3000, -1000, -9000},
		{5000, 0, 0, 0, 3000, 0, -3100, -100000},
		{0, 1000, 0, 0, 0, 0, -1000, 0},
		{100000, 1000, 0, 0, 0, 0, -1000, 0},
		{0, 1000, 0, 0, 0, 0, -1000, -5000}
	},

	{
		{5000, 1000, 0, 0, 0, 0, -1000, -5000},
		{0, 0, 0, 0, 0, 0, -1000, -3000},
		{3100, 0, 1000, 3100, 0, 0, -1000, -3100},
		{9000, 0, 0, 1000, 0, 0, 0, -9000},
		{0, 0, 0, 0, 0, -1000, -3100, -100000},
		{5000, 1000, 3000, 0, 0, 0, -1000, 0},
		{100000, 1000, 0, 0, 0, 0, -1000, 0},
		{0, 1000, 0, 0, 0, 0, -1000, -5000}
	},

	{
		{5000, 1000, 0, 0, 0, 0, -1000, -5000},
		{3000, 1000, 0, 0, 0, 0, -1000, 0},
		{3100, 1000, 0, 0, 0, -1000, 0, 0},
		{9000, 0, 0, 1000, -1000, 0, -3000, -9000},
		{0, 3100, 0, 0, 1000, -1000, -3000, -100000},
		{5000, 1000, 3000, 0, -3100, 0, -1000, -3100},
		{100000, 1000, 0, 0, 0, 0, -1000, 0},
		{0, 1000, 0, 0, 0, 0, -1000, -5000}
	},

	{
		{5000, 1000, 0, 0, 0, 0, -1000, -5000},
		{0, 1000, 0, 0, 0, 0, -1000, -3000},
		{3100, 1000, 3000, 0, 0, -1000, 0, 0},
		{0, 1000, 0, 0, -1000, 0, 0, -9000},
		{100000, 0, 0, 1000, 0, -1000, 0, -100000},
		{3100, 1000, 9000, 0, 0, 0, -1000, -3100},
		{0, 1000, 0, 0, 0, 0, -1000, -3000},
		{5000, 0, 1000, 0, 0, 0, -1000, -5000}
	},

	{
	
	},

	{
	
	},

	{
	
	},

	{
	
	},

	{
	
	}
};

const int board_tactic[kNPositions][8][8] = {

	{
		{5000, 1000, 0, 0, 0, 0, -1000, -5000},
		{3000, 1000, 0, 0, 0, 0, -1000, 0},
		{3100, 1000, 0, -3000, 0, 0, -1000, -3100},
		{9000, 1000, 0, 0, 0, 0, -1000, -9000},
		{0, 0, 0, 0, 5000, 0, -3100, -100000},
		{3100, 1000, 0, 0, 0, 0, -1000, 0},
		{100000, 1000, 0, 0, 0, 0, -1000, 0},
		{0, 1000, 0, 0, 0, 0, -1000, -5000}
	},

	{
		{5000, 1000, 0, 0, 0, -1000, 0, -5000},
		{0, 1000, 3000, 0, 0, 0, -1000, -3000},
		{0, 1000, 3000, 0, 0, 0, 0, -3100},
		{9000, 0, 0, 0, -1000, 0, 0, -9000},
		{100000, 0, 3100, 1000, -1000, 0, 0, -100000},
		{3100, 1000, 0, 0, 0, -3000, -1000, -3100},
		{0, 1000, 0, 0, 0, 0, -1000, 0},
		{5000, 1000, 0, 0, 0, 0, -1000, -5000}
	},

	{
		{5000, 1000, 0, 0, 0, 0, -1000, -5000},
		{0, 1000, 0, 0, 0, 0, -1000, 0},
		{0, 0, 1000, -1000, 0, 0, 0, 0},
		{9000, 3000, 0, 1000, -1000, 0, -9000, 0},
		{100000, 0, 1000, 0, -3000, 0, -1000, -100000},
		{3100, 1000, 3000, 3100, -3100, -3000, -1000, -3100},
		{0, 1000, 0, 0, 0, 0, -1000, 0},
		{5000, 1000, 0, 0, 0, 0, -1000, -5000}
	},

	{
		{0, 1000, 0, 0, 0, -1000, 0, -5000},
		{0, 1000, 3000, -1000, 0, -9000, 0, 0},
		{100000, 1000, 0, 0, 0, 0, 0, 0},
		{5000, 9000, 0, 0, 0, -1000, -3000, 0},
		{0, 3000, 3100, 1000, -1000, -3100, -3100, 0},
		{3100, 0, 1000, 0, 0, -3000, -1000, -5000},
		{0, 0, 0, 0, 1000, 0, -1000, -100000},
		{5000, 1000, 0, 0, 0, 0, -1000, 0}
	},

	{
		{5000, 0, 0, 1000, 0, -1000, 0, -5000},
		{0, 1000, 0, 0, 0, -1000, 0, 0},
		{3100, 9000, 1000, 3100, -3100, -3000, -1000, -3100},
		{0, 3000, 1000, 0, 0, -1000, 0, -9000},
		{5000, 0, 0, 1000, -1000, 0, 0, 0},
		{0, 1000, 3000, 0, 0, -3000, -1000, -5000},
		{100000, 1000, 0, 0, 0, 0, -1000, -100000},
		{0, 0, 1000, 0, 0, -1000, 0, 0}
	},

	{
	
	},

	{
	
	},

	{
	
	},

	{
	
	},

	{
	
	}
};

const int board_small[kNPositions][8][8] = {

	{
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 1000, 0, 0, 0, 0},
		{-3100, 0, 0, 0, 3100, 0, 0, 0},
		{0, 0, 0, 0, -3000, 0, 0, 0},
		{0, 0, 0, 0, 0, -100000, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{3000, -1000, 0, 0, 0, 0, 0, 0},
		{0, 0, 100000, 0, 0, 0, -1000, 0}
	},

	{
		{0, -5000, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 3100, 0, 0, 0, 0},
		{0, 0, 100000, 1000, 0, -100000, 0, 0},
		{0, 0, 1000, 0, 0, -1000, 0, 0},
		{0, 0, 0, 1000, -1000, 0, 0, 0}
	},

	{
		{0, 0, -1000, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 1000, 100000, 0, 0, 0, 0},
		{0, 0, 0, 0, -3000, 0, 0, 0},
		{0, 0, 0, 0, -100000, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 1000, 3000, 0, 0, 0}
	},

	{
		{0, 0, 0, 0, 0, 0, 9000, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, -1000, 0, 0},
		{100000, 1000, 0, 0, -3100, -100000, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, -5000},
		{0, 0, 0, 0, 0, 0, 0, 0}
	},

	{
		{0, 0, 0, 1000, 0, 0, 5000, 0},
		{0, -5000, 0, 0, 0, -1000, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0},
		{100000, 0, 1000, 0, -100000, -1000, 0, 0},
		{0, 1000, 0, 0, -1000, 0, 0, 0}
	},

	{
	
	},

	{
	
	},

	{
	
	},

	{
	
	},

	{
	
	}
};



static inline void iterateBoard( Board& b, const int position[8][8] ) {

	for (int x = 0; x < 8; ++x) {
		for (int y = 0; y < 8; ++y) {
			b.board[x][y] = position[x][y];
		}
	}
}

void Board::initialize( int board_type, int board_index ) {

	if (board_type == 0) {
		iterateBoard(*this, board_regular[board_index]);
	}

	else if (board_type == 1) {
		iterateBoard(*this, board_tactic[board_index]);
	}

	else {
		iterateBoard(*this, board_small[board_index]);
	}
}



void makeMove( Board& b, Move& move ) {

	b.board[move.to_x][move.to_y] = b.board[move.from_x][move.from_y];
	b.board[move.from_x][move.from_y] = 0;
}